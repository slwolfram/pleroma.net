{"version":3,"sources":["pleromanet/main.cljs"],"mappings":";AAIA,AAAA,AAAMA,AAAcC;AAApB,AACE,AAAMC,AAAE,AAAA,AAAA,AAACC,AAAeF;AAAxB,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG,AAEG,AAAA,AAAAE,AAACC,AAAQL,AAEO,AAAA,AAAA,AAAAI,AAASJ;AAJ5B,AAKwB,AAAA,AAACM,AAAMN,AAAEO,AAAa,AAAA,AAAAL;AAL9C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAO6B,AAAA,AAAA,AAAAC,AAASJ;AAPtC,AAQgC,AAAA,AAACM,AAAMN,AAAEO,AAAa,AAAA,AAAAJ;AARtD;;;AAWJ,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["pleromanet.main/password-box","pw","s","reagent.core.atom","p1__27298#","p1__27299#","cljs.core/deref","cljs.core.pr_str","cljs.core.swap_BANG_","cljs.core/assoc","pleromanet.main/header"],"sourcesContent":["(ns pleromanet.main\n  (:require [reagent.core :as r]\n            ))\n\n(defn password-box [pw]\n  (let [s (r/atom {:value pw})]\n    (fn []\n      [:form\n       (pr-str @s) [:br]\n       [:input {:type :password\n                :value (:value @s)\n                :on-change #(swap! s assoc :value (-> % .-target .-value))}] [:br]\n       [:label [:input {:type :checkbox\n                        :checked (:show? @s)\n                        :on-change #(swap! s assoc :show? (-> % .-target .-checked))}]\n        \"Show password?\"]])))\n\n(defn header []\n  [:div\n   [:h1 {:style {:margin \"0 0 0 0\"}} \"pleroma|net\"]\n   ;;[password-box \"\"]\n   ])\n"]}