{"version":3,"sources":["pleromanet/main.cljs"],"mappings":"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","names":["pleromanet.main/password-box","pw","s","reagent.core.atom","p1__27861#","p1__27862#","cljs.core/deref","cljs.core.pr_str","cljs.core.swap_BANG_","cljs.core/assoc","pleromanet.main/header","pleromanet.main/sephirot","name","pleromanet.main/crown","pleromanet.main/understanding","pleromanet.main/wisdom","pleromanet.main/knowledge","pleromanet.main/strength","pleromanet.main/mercy","pleromanet.main/beauty","pleromanet.main/splendor","pleromanet.main/victory","pleromanet.main/foundation","pleromanet.main/kingdom","pleromanet.main/get-path-coords","from","to","pleromanet.main/create-path","js/console","cljs.core.assoc","pleromanet.main/tol","iter__4529__auto__","s__27866","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__27868","cljs.core/chunk-buffer","i__27867","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27865","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","args","cljs.core.apply","p1__27863#","cljs.core.map","cljs.core/identity","p1__27864#","pleromanet.main/app","pleromanet.main/mount!","reagent.core.render","js/document","pleromanet.main/main!","pleromanet.main/reload!","cljs.core/chunk-first"],"sourcesContent":["(ns pleromanet.main\n  (:require [reagent.core :as r]))\n\n(defn password-box [pw]\n  (let [s (r/atom {:value pw})]\n    (fn []\n      [:form\n       (pr-str @s) [:br]\n       [:input {:type :password\n                :value (:value @s)\n                :on-change #(swap! s assoc :value (-> % .-target .-value))}] [:br]\n       [:label [:input {:type :checkbox\n                        :checked (:show? @s)\n                        :on-change #(swap! s assoc :show? (-> % .-target .-checked))}]\n        \"Show password?\"]])))\n\n(defn header []\n  [:div\n   [:h1 {:style {:margin \"0 0 0 0\"}} \"pleroma|net\"]\n   ;;[password-box \"\"]\n   ])\n\n(defn sephirot [name ]\n  ) \n\n(def crown {:key \"crown\" :id \"crown\" :cx \"150\" :cy \"50\" :fill \"#FFF\"})\n(def understanding {:key \"understanding\" :id \"understanding\" :cx \"50\" :cy \"100\" :fill \"#200080\"})\n(def wisdom {:key \"wisdom\" :id \"wisdom\" :cx \"250\" :cy \"100\" :fill \"#f5ffb3\"})\n(def knowledge {:key \"knowledge\" :id \"knowledge\" :cx \"150\" :cy \"150\" :fill \"none\"})\n(def strength {:key \"strength\" :id \"strength\" :cx \"50\" :cy \"200\" :fill \"#ff0000\"})\n(def mercy {:key \"mercy\" :id \"mercy\" :cx \"250\" :cy \"200\" :fill \"#0000ff\"})\n(def beauty {:key \"beauty\" :id \"beauty\" :cx \"150\" :cy \"250\" :fill \"#DEFF00\"})\n(def splendor {:key \"splendor\" :id \"splendor\" :cx \"50\" :cy \"300\" :fill \"#ff8000\"})\n(def victory {:key \"victory\" :id \"victory\" :cx \"250\" :cy \"300\" :fill \"#586600\"})\n(def foundation {:key \"foundation\" :id \"foundation\" :cx \"150\" :cy \"350\" :fill \"#8000ff\"})\n(def kingdom {:key \"kingdom\" :id \"kingdom\" :cx \"150\" :cy \"450\" :fill \"#161a00\"})\n\n\n(defn get-path-coords [from to]\n  {:x1 (:cx from) :y1 (:cy from) :x2 (:cx to) :y2 (:cy to)})\n\n(defn create-path [name from to]\n  (. js/console log name)\n  [:line (assoc (get-path-coords from to) \n                :key name :id name :class \"path\" \n                :style {:stroke \"#DEFF00\" :stroke-width \"5\"})])\n\n\n(defn tol []\n  [:svg {:id \"tol\" :height \"500\" :width \"300\" :class \"\"}\n   [:circle {:key \"\" :id \"\" :cx \"150\" :cy \"150\" :r \"140\" :style {:stroke \"#DEFF00\" :stroke-width \"2\"}}]\n\n\n\n   (for [args [[\"magus\" crown understanding]\n               [\"high-priestess\" crown beauty]\n               [\"fool\" crown wisdom]\n               [\"empress\" understanding wisdom]\n               [\"chariot\" understanding strength]\n               [\"lovers\" understanding beauty]\n               [\"star\" wisdom beauty]\n               [\"heirophant\" wisdom mercy]\n               [\"lust\" strength mercy]\n               ]]\n     (apply create-path args))\n\n   (map #(identity\n          [:line (assoc % :class \"path\" :style {:stroke \"#DEFF00\" :stroke-width \"5\"})])\n        [\n         {:key \"hanged-man\" :id \"hanged-man\"\n          :x1 \"50\" :y1 \"200\"\n          :x2 \"50\" :y2 \"300\"}\n          {:key \"adjustment\" :id \"adjustment\" :x1 \"50\" :y1 \"200\" :x2 \"150\" :y2 \"250\"}\n          {:key \"devil\" :id \"devil\" :x1 \"50\" :y1 \"300\" :x2 \"150\" :y2 \"250\"}\n          {:key \"hermit\" :id \"hermit\" :x1 \"250\" :y1 \"200\" :x2 \"150\" :y2 \"250\"}\n          {:key \"wheel-of-fortune\" :id \"wheel-of-fortune\" :x1 \"250\" :y1 \"200\" :x2 \"250\" :y2 \"300\"}\n          {:key \"death\" :id \"death\" :x1 \"250\" :y1 \"300\" :x2 \"150\" :y2 \"250\"}\n          {:key \"art\" :id \"art\" :x1 \"150\" :y1 \"250\" :x2 \"150\" :y2 \"350\"}\n          {:key \"tower\" :id \"tower\" :x1 \"50\" :y1 \"300\" :x2 \"250\" :y2 \"300\"}\n          {:key \"sun\" :id \"sun\" :x1 \"50\" :y1 \"300\" :x2 \"150\" :y2 \"350\"}\n          {:key \"emperor\" :id \"emperor\" :x1 \"150\" :y1 \"350\" :x2 \"250\" :y2 \"300\"}\n          {:key \"aeon\" :id \"aeon\" :x1 \"50\" :y1 \"300\" :x2 \"150\" :y2 \"450\"}\n          {:key \"universe\" :id \"universe\" :x1 \"150\" :y1 \"350\" :x2 \"150\" :y2 \"450\"}\n          {:key \"moon\" :id \"moon\" :x1 \"250\" :y1 \"300\" :x2 \"150\" :y2 \"450\"}])\n   (. js/console log kingdom)\n   (map #(identity\n          [:circle (assoc % :class \"sephirot\" :r \"20\" :stroke \"#DEFF00\" :stroke-width \"5\")])\n        [crown understanding wisdom knowledge strength mercy beauty splendor victory foundation kingdom])])\n\n(defn app []\n  [:div\n   [header]\n   [tol]])\n\n(defn mount! []\n  (r/render [app] (.getElementById js/document \"app\")))\n\n(defn main! [] (mount!))\n\n(defn reload! [] (mount!))\n"]}