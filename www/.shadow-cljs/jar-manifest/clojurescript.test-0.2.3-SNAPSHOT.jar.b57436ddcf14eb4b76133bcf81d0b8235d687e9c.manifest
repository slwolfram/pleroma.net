["^ ","~:foreign-libs",[],"~:externs",[],"~:resources",[["^ ","~:js-str-offsets",[["^ ","~:string","webpage","~:offset",150,"~:import",false],["^ ","^4","fs","^5",188,"^6",false],["^ ","^4","system","^5",213,"^6",false]],"~:classpath",true,"~:js-esm",false,"~:cache-key",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"~:js-imports",[],"~:js-invalid-requires",[],"~:goog-provides",[],"~:js-language","es3","~:goog-module",null,"~:ns","~$module$cemerick$cljs$test$runner","~:output-name","module$cemerick$cljs$test$runner.js","~:resource-id",["~:shadow.build.classpath/resource","cemerick/cljs/test/runner.js"],"~:resource-name","cemerick/cljs/test/runner.js","~:type","~:js","~:js-requires",["webpage","fs","system"],"~:source","// reusable phantomjs script for running clojurescript.test tests\n// see http://github.com/cemerick/clojurescript.test for more info\n\nvar p = require('webpage').create();\nvar fs = require('fs');\nvar sys = require('system');\nfor (var i = 1; i < sys.args.length; i++) {\n    if (fs.exists(sys.args[i])) {\n        if (!p.injectJs(sys.args[i])) throw new Error(\"Failed to inject \" + sys.args[i]);\n    } else {\n        p.evaluateJavaScript(\"(function () { \" + sys.args[i] + \";\" + \" })\");\n    }\n}\n\np.onConsoleMessage = function (x) {\n  var line = x.toString();\n  if (line !== \"[NEWLINE]\") {\n    console.log(line.replace(/\\[NEWLINE\\]/g, \"\\n\"));\n  }\n};\n\np.evaluate(function () {\n  cemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    console.log(x.replace(/\\n/g, \"[NEWLINE]\")); // since console.log *itself* adds a newline\n  });\n});\n\nvar success = p.evaluate(function () {\n  var results = cemerick.cljs.test.run_all_tests();\n  console.log(results);\n  return cemerick.cljs.test.successful_QMARK_(results);\n});\n\nphantom.exit(success ? 0 : 1);\n\n","~:last-modified",1612119863384,"~:requires",["~#set",[]],"~:pom-info",["^ ","~:group-id","~$com.cemerick","~:artifact-id","~$clojurescript.test","~:version","0.2.3-SNAPSHOT","~:name","clojurescript.test","~:description","Port of clojure.test targeting ClojureScript.","~:url","http://github.com/cemerick/clojurescript.test","~:id","~$com.cemerick/clojurescript.test","~:coordinate",["^V","0.2.3-SNAPSHOT"]],"~:goog-requires",[],"~:inspect-info",["^ ","^3",[["^ ","^4","webpage","^5",150,"^6",false],["^ ","^4","fs","^5",188,"^6",false],["^ ","^4","system","^5",213,"^6",false]],"^8",false,"^:",[],"^;",[],"^<",[],"^=","es3","^>",null,"^G",["webpage","fs","system"],"^X",[],"~:uses-global-buffer",false,"~:uses-global-process",false],"^T",["~#url","jar:file:/home/p1e191223/.m2/repository/com/cemerick/clojurescript.test/0.2.3-SNAPSHOT/clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/runner.js"],"~:provides",["^K",["^@"]],"^Z",false,"~:from-jar",true,"~:deps",["webpage","fs","system"],"^[",false],["^ ","^3",[["^ ","^4","path","^5",19,"^6",false],["^ ","^4","fs","^5",43,"^6",false]],"^7",true,"^8",false,"^9",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"^:",[],"^;",[],"^<",[],"^=","es3","^>",null,"^?","~$module$cemerick$cljs$test$node_runner","^A","module$cemerick$cljs$test$node_runner.js","^B",["^C","cemerick/cljs/test/node_runner.js"],"^D","cemerick/cljs/test/node_runner.js","^E","^F","^G",["path","fs"],"^H","var path = require(\"path\"),\n  fs = require(\"fs\"),\n  args = process.argv.slice(2);\n\nargs.forEach(function (arg) {\n    var file = path.join(process.cwd(), arg);\n    if (fs.existsSync(file)) {\n      try {\n        // using eval instead of require here so that `this` is the \"real\"\n        // top-level scope, not the module\n        eval(\"(function () {\" + fs.readFileSync(file, {encoding: \"UTF-8\"}) + \"})()\");\n      } catch (e) {\n        console.log(\"Error in file: \\\"\" + file + \"\\\"\");\n        console.log(e);\n      }\n    } else {\n      try {\n        eval(\"(function () {\" + arg + \"})()\");\n      } catch (e) {\n        console.log(\"Could not evaluate expression: \\\"\" + arg + \"\\\"\");\n        console.log(e);\n      }\n    }\n});\n\ncemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    // since console.log *itself* adds a newline \n    var x = x.replace(/\\n$/, \"\");\n    if (x.length > 0) console.log(x);\n});\n\nvar success = (function() {\n    var results = cemerick.cljs.test.run_all_tests();\n    return cemerick.cljs.test.successful_QMARK_(results);\n})();\n\nprocess.exit(success ? 0 : 1);\n","^I",1612119863384,"^J",["^K",[]],"^L",["^ ","^M","^N","^O","^P","^Q","0.2.3-SNAPSHOT","^R","clojurescript.test","^S","Port of clojure.test targeting ClojureScript.","^T","http://github.com/cemerick/clojurescript.test","^U","^V","^W",["^V","0.2.3-SNAPSHOT"]],"^X",[],"^Y",["^ ","^3",[["^ ","^4","path","^5",19,"^6",false],["^ ","^4","fs","^5",43,"^6",false]],"^8",false,"^:",[],"^;",[],"^<",[],"^=","es3","^>",null,"^G",["path","fs"],"^X",[],"^Z",false,"^[",true],"^T",["^10","jar:file:/home/p1e191223/.m2/repository/com/cemerick/clojurescript.test/0.2.3-SNAPSHOT/clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/node_runner.js"],"^11",["^K",["^14"]],"^Z",false,"^12",true,"^13",["path","fs","process"],"^[",true],["^ ","^3",[],"^7",true,"^8",false,"^9",["b57436ddcf14eb4b76133bcf81d0b8235d687e9c"],"^:",[],"^;",[],"^<",[],"^=","es3","^>",null,"^?","~$module$cemerick$cljs$test$rhino_runner","^A","module$cemerick$cljs$test$rhino_runner.js","^B",["^C","cemerick/cljs/test/rhino_runner.js"],"^D","cemerick/cljs/test/rhino_runner.js","^E","^F","^G",[],"^H","arguments.forEach(function (arg) {\n    if (new java.io.File(arg).exists()) {\n      try {\n        load(arg);\n      } catch (e) {\n        print(\"Error in file: \\\"\" + arg + \"\\\"\");\n        print(e);\n      }\n    } else {\n      try {\n        eval(\"(function () {\" + arg + \"})()\");\n      } catch (e) {\n        print(\"Could not evaluate expression: \\\"\" + arg + \"\\\"\");\n        print(e);\n      }\n    }\n});\n\ncemerick.cljs.test.set_print_fn_BANG_(function(x) {\n    // since console.log *itself* adds a newline\n    var x = x.replace(/\\n$/, \"\");\n    if (x.length > 0) print(x);\n});\n\nvar results = cemerick.cljs.test.run_all_tests();\nvar success = cemerick.cljs.test.successful_QMARK_(results);\n\njava.lang.System.exit(success ? 0 : 1);\n","^I",1612119863384,"^J",["^K",[]],"^L",["^ ","^M","^N","^O","^P","^Q","0.2.3-SNAPSHOT","^R","clojurescript.test","^S","Port of clojure.test targeting ClojureScript.","^T","http://github.com/cemerick/clojurescript.test","^U","^V","^W",["^V","0.2.3-SNAPSHOT"]],"^X",[],"^Y",["^ ","^3",[],"^8",false,"^:",[],"^;",[],"^<",[],"^=","es3","^>",null,"^G",[],"^X",[],"^Z",false,"^[",false],"^T",["^10","jar:file:/home/p1e191223/.m2/repository/com/cemerick/clojurescript.test/0.2.3-SNAPSHOT/clojurescript.test-0.2.3-SNAPSHOT.jar!/cemerick/cljs/test/rhino_runner.js"],"^11",["^K",["^15"]],"^Z",false,"^12",true,"^13",[],"^[",false]],"~:data-readers",null,"~:shadow.build.classpath/CACHE-TIMESTAMP",1610814543000]